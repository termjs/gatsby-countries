{"version":3,"file":"component---src-templates-about-tsx.js","mappings":"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","sources":["webpack://gatsby-countries/./src/templates/about.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport { graphql, Link, navigate } from \"gatsby\";\r\nimport Layout from \"../components/layouts/layout\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport countryData from \"../../src/data/data.json\";\r\n\r\ninterface CountryData {\r\n  name: string;\r\n  nativeName: string;\r\n  population: number;\r\n  topLevelDomain: string;\r\n  region: string;\r\n  subregion: string;\r\n  capital: string;\r\n  borders: string[];\r\n  flags: {\r\n    png: string;\r\n  };\r\n  currencies: {\r\n    name: string;\r\n  }[];\r\n  languages: {\r\n    name: string;\r\n  }[];\r\n}\r\n\r\n// Helper function to map country code to full name\r\nconst getFullCountryName = (code: string): string => {\r\n  const country = countryData.find((item: { alpha3Code: string; name: string }) => item.alpha3Code === code);\r\n  return country ? country.name : code; // Default to country code if not found\r\n};\r\n\r\nconst AboutPage: React.FC<{ data: { dataJson: CountryData } }> = ({ data }) => {\r\n  if (!data || !data.dataJson) {\r\n    return <h1>Data not found</h1>;\r\n  }\r\n  const country = data.dataJson;\r\n\r\n  return (\r\n    <Layout>\r\n      <main>\r\n\r\n        <button onClick={() => navigate(-1)} className=\"backButton\">\r\n          <FontAwesomeIcon icon={faArrowLeft} />\r\n          Back\r\n        </button>\r\n\r\n        <div className=\"country-about\">\r\n          <img src={country.flags.png} alt={`${country.name} flag`} />\r\n\r\n          <div className=\"country-align\">\r\n            <h1>{country.name}</h1>\r\n            <div className=\"country-data-container\">\r\n              <div>\r\n                <span>Native Name: <p>{country.nativeName}</p></span>\r\n                <span>Population: <p>{country.population.toLocaleString()}</p></span>\r\n                <span>Region: <p>{country.region}</p></span>\r\n                <span>Sub Region: <p>{country.subregion}</p></span>\r\n                <span>Capital: <p>{country.capital}</p></span>\r\n              </div>\r\n\r\n              <div>\r\n                <span>Top Level Domain: <p>{country.topLevelDomain}</p></span>\r\n                <span>Currencies: <p>{country.currencies?.map(currency => currency.name).join(', ') || \"N/A\"}</p></span>\r\n                <span>Languages: <p>{country.languages?.map(language => language.name).join(', ') || \"N/A\"}</p></span>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"borderTags\">\r\n              <span>Border Countries: </span>\r\n              {country.borders && country.borders.length > 0 ? (\r\n                country.borders.map((border: string) => (\r\n                  <Link key={border} to={`/about/${getFullCountryName(border).toLowerCase()}`}>\r\n                    {getFullCountryName(border)}\r\n                  </Link>\r\n                ))\r\n              ) : (\r\n                <p>No border countries found</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query($name: String!) {\r\n    dataJson(name: { eq: $name }) {\r\n      name\r\n      nativeName\r\n      population\r\n      topLevelDomain\r\n      region\r\n      subregion\r\n      capital\r\n      borders\r\n      flags {\r\n        png\r\n      }\r\n      currencies {\r\n        name\r\n      }\r\n      languages {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default AboutPage;\r\n"],"names":["React","Link","navigate","Layout","FontAwesomeIcon","faArrowLeft","countryData","getFullCountryName","code","country","find","item","alpha3Code","name","AboutPage","data","dataJson","onClick","className","icon","src","flags","png","alt","nativeName","population","toLocaleString","region","subregion","capital","topLevelDomain","currencies","_country$currencies","map","currency","join","languages","_country$languages","language","borders","length","border","key","to","toLowerCase","query"],"sourceRoot":""}