{"version":3,"file":"component---src-templates-about-tsx-008a6d5242a3640fc7bb.js","mappings":"sMA4BA,MAAMA,EAAsBC,IAC1B,MAAMC,EAAUC,EAAYC,MAAMC,GAA+CA,EAAKC,aAAeL,IACrG,OAAOC,EAAUA,EAAQK,KAAON,CAAI,EAkFtC,UA/EiEO,IAAc,YAAb,KAAEC,GAAM,EACxE,IAAKA,IAASA,EAAKC,SACjB,OAAOC,EAAAA,cAAAA,KAAAA,KAAI,kBAEb,MAAMT,EAAUO,EAAKC,SAErB,OACEC,EAAAA,cAACC,EAAAA,EAAM,KACLD,EAAAA,cAAAA,OAAAA,KAEEA,EAAAA,cAAAA,SAAAA,CAAQE,QAAS,KAAMC,EAAAA,EAAAA,WAAU,GAAIC,UAAU,cAC7CJ,EAAAA,cAACK,EAAAA,EAAe,CAACC,KAAMC,EAAAA,MAAe,QAIxCP,EAAAA,cAAAA,MAAAA,CAAKI,UAAU,iBACbJ,EAAAA,cAAAA,MAAAA,CAAKQ,IAAKjB,EAAQkB,MAAMC,IAAKC,IAAQpB,EAAQK,KAAI,UAEjDI,EAAAA,cAAAA,MAAAA,CAAKI,UAAU,iBACbJ,EAAAA,cAAAA,KAAAA,KAAKT,EAAQK,MACbI,EAAAA,cAAAA,MAAAA,CAAKI,UAAU,0BACbJ,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAAAA,OAAAA,KAAM,gBAAa,yBAAIT,EAAQqB,aAC/BZ,EAAAA,cAAAA,OAAAA,KAAM,eAAY,yBAAIT,EAAQsB,WAAWC,mBACzCd,EAAAA,cAAAA,OAAAA,KAAM,WAAQ,yBAAIT,EAAQwB,SAC1Bf,EAAAA,cAAAA,OAAAA,KAAM,eAAY,yBAAIT,EAAQyB,YAC9BhB,EAAAA,cAAAA,OAAAA,KAAM,YAAS,yBAAIT,EAAQ0B,WAG7BjB,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAAAA,OAAAA,KAAM,qBAAkB,yBAAIT,EAAQ2B,iBACpClB,EAAAA,cAAAA,OAAAA,KAAM,eAAY,0BAAsB,QAAlB,EAAAT,EAAQ4B,kBAAU,aAAlBC,EAAoBC,KAAIC,GAAYA,EAAS1B,OAAM2B,KAAK,QAAS,QACvFvB,EAAAA,cAAAA,OAAAA,KAAM,cAAW,0BAAqB,QAAjB,EAAAT,EAAQiC,iBAAS,aAAjBC,EAAmBJ,KAAIK,GAAYA,EAAS9B,OAAM2B,KAAK,QAAS,UAIzFvB,EAAAA,cAAAA,MAAAA,CAAKI,UAAU,cACbJ,EAAAA,cAAAA,OAAAA,KAAM,sBACLT,EAAQoC,SAAWpC,EAAQoC,QAAQC,OAAS,EAC3CrC,EAAQoC,QAAQN,KAAKQ,GACnB7B,EAAAA,cAAC8B,EAAAA,KAAI,CAACC,IAAKF,EAAQG,GAAE,UAAY3C,EAAmBwC,GAAQI,eACzD5C,EAAmBwC,MAIxB7B,EAAAA,cAAAA,IAAAA,KAAG,iCAMN,C","sources":["webpack://gatsby-countries/./src/templates/about.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport { graphql, Link, navigate } from \"gatsby\";\r\nimport Layout from \"../components/layouts/layout\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport countryData from \"../../src/data/data.json\";\r\n\r\ninterface CountryData {\r\n  name: string;\r\n  nativeName: string;\r\n  population: number;\r\n  topLevelDomain: string;\r\n  region: string;\r\n  subregion: string;\r\n  capital: string;\r\n  borders: string[];\r\n  flags: {\r\n    png: string;\r\n  };\r\n  currencies: {\r\n    name: string;\r\n  }[];\r\n  languages: {\r\n    name: string;\r\n  }[];\r\n}\r\n\r\n// Helper function to map country code to full name\r\nconst getFullCountryName = (code: string): string => {\r\n  const country = countryData.find((item: { alpha3Code: string; name: string }) => item.alpha3Code === code);\r\n  return country ? country.name : code; // Default to country code if not found\r\n};\r\n\r\nconst AboutPage: React.FC<{ data: { dataJson: CountryData } }> = ({ data }) => {\r\n  if (!data || !data.dataJson) {\r\n    return <h1>Data not found</h1>;\r\n  }\r\n  const country = data.dataJson;\r\n\r\n  return (\r\n    <Layout>\r\n      <main>\r\n\r\n        <button onClick={() => navigate(-1)} className=\"backButton\">\r\n          <FontAwesomeIcon icon={faArrowLeft} />\r\n          Back\r\n        </button>\r\n\r\n        <div className=\"country-about\">\r\n          <img src={country.flags.png} alt={`${country.name} flag`} />\r\n\r\n          <div className=\"country-align\">\r\n            <h1>{country.name}</h1>\r\n            <div className=\"country-data-container\">\r\n              <div>\r\n                <span>Native Name: <p>{country.nativeName}</p></span>\r\n                <span>Population: <p>{country.population.toLocaleString()}</p></span>\r\n                <span>Region: <p>{country.region}</p></span>\r\n                <span>Sub Region: <p>{country.subregion}</p></span>\r\n                <span>Capital: <p>{country.capital}</p></span>\r\n              </div>\r\n\r\n              <div>\r\n                <span>Top Level Domain: <p>{country.topLevelDomain}</p></span>\r\n                <span>Currencies: <p>{country.currencies?.map(currency => currency.name).join(', ') || \"N/A\"}</p></span>\r\n                <span>Languages: <p>{country.languages?.map(language => language.name).join(', ') || \"N/A\"}</p></span>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"borderTags\">\r\n              <span>Border Countries: </span>\r\n              {country.borders && country.borders.length > 0 ? (\r\n                country.borders.map((border: string) => (\r\n                  <Link key={border} to={`/about/${getFullCountryName(border).toLowerCase()}`}>\r\n                    {getFullCountryName(border)}\r\n                  </Link>\r\n                ))\r\n              ) : (\r\n                <p>No border countries found</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query($name: String!) {\r\n    dataJson(name: { eq: $name }) {\r\n      name\r\n      nativeName\r\n      population\r\n      topLevelDomain\r\n      region\r\n      subregion\r\n      capital\r\n      borders\r\n      flags {\r\n        png\r\n      }\r\n      currencies {\r\n        name\r\n      }\r\n      languages {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default AboutPage;\r\n"],"names":["getFullCountryName","code","country","countryData","find","item","alpha3Code","name","_ref","data","dataJson","React","Layout","onClick","navigate","className","FontAwesomeIcon","icon","faArrowLeft","src","flags","png","alt","nativeName","population","toLocaleString","region","subregion","capital","topLevelDomain","currencies","_country$currencies","map","currency","join","languages","_country$languages","language","borders","length","border","Link","key","to","toLowerCase"],"sourceRoot":""}